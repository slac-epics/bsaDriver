#==============================================================
#
#  Name: bsaDriver
#
#  Rem:
#        EPICS driver module
#        LCLS-II Timing System
#
#  Side: None
#
#  Auth: 17-Mar-2017, Kukhee Kim      (KHKIM)
#  Rev:  27-Sep-2022, Dawood Alnajjar (DNAJJAR)
#--------------------------------------------------------------
#  Mod:
#        dd-mmm-yyyy, Reviewer's Name (USERNAME)
#          coment
#
#==============================================================
#
# NOTE:

This is an epics driver module to provide BSA interface for LCLS-II High Performance System (HPS)
which is based on ATCA platform.
It provides epics shell command to configure/setup the BSA names and also provides epics database
templates for BSA PVs in epics ioc application.

Requirements:

- The epics ioc application should build with yamlLoader driver and with CPSW framework.

  API layer
  . cpsw/framework R4.4.1
  . yaml-cpp-0.5.3_boost-1.64.0
  . boost 1.64.0
  . timing/bsa R2.2.0-0.2

  configure/CONFIG_SITE.Common.<platform> in application should have the followings:

  CPSW_FRAMEWORK_PACKAGE_NAME=cpsw/framework
  CPSW_FRAMEWORK_VERSION=R4.4.1
  CPSW_FRAMEWORK=$(PACKAGE_AREA)/$(CPSW_FRAMEWORK_PACKAGE_NAME)/$(CPSW_FRAMEWORK_VERSION)/$(LINUXRT_BUILDROOT_VERSION)-x86_64
  CPSW_FRAMEWORK_LIB     = $(CPSW_FRAMEWORK)/lib
  CPSW_FRAMEWORK_INCLUDE = $(CPSW_FRAMEWORK)/include

  YAML_NAME=yaml-cpp
  YAML_VERSION=yaml-cpp-0.5.3_boost-1.64.0
  YAML_ARCH=$(LINUXRT_BUILDROOT_VERSION)-x86_64
  YAML=$(PACKAGE_AREA)/$(YAML_NAME)/$(YAML_VERSION)/$(YAML_ARCH)
  YAML_INCLUDE=$(YAML)/include
  YAML_LIB=$(YAML)/lib

  BOOST_PACKAGE_NAME=boost
  BOOST_VERSION=1.64.0
  BOOST_ARCH=$(LINUXRT_BUILDROOT_VERSION)-x86_64
  BOOST=$(PACKAGE_AREA)/$(BOOST_PACKAGE_NAME)/$(BOOST_VERSION)/$(BOOST_ARCH)
  BOOST_LIB     = $(BOOST)/lib
  BOOST_INCLUDE = $(BOOST)/include

  BSA_PACKAGE_NAME=timing/bsa
  BSA_VERSION=R2.2.0
  BSA_ARCH=$(LINUXRT_BUILDROOT_VERSION)-x86_64
  BSA=$(PACKAGE_AREA)/$(BSA_PACKAGE_NAME)/$(BSA_VERSION)/$(BSA_ARCH)
  BSA_LIB     = $(BSA)/lib
  BSA_INCLUDE = $(BSA)/include




  EPICS module
  . yamlLoader R2.2.0
  . asyn R4.39-1.0.1
  . pvxs R0.3.1-0.0.1

  configure/RELEASE in application should have the followings:

  ASYN_MODULE_VERSION=R4.39-1.0.1
  YAMLLOADER_MODULE_VERSION=R2.2.0
  BSADRIVER_MODULE_VERSION=R2.5.0
  PVXS_MODULE_VERSION=R0.3.1-0.0.1

  ASYN=$(EPICS_MODULES)/asyn/$(ASYN_MODULE_VERSION)
  YAMLLOADER=$(EPICS_MODULES)/yamlLoader/$(YAMLLOADER_MODULE_VERSION)
  PVXS=$(EPICS_MODULES)/pvxs/$(PVXS_MODULE_VERSION)

  BSADRIVER=$(EPICS_MODULES)/bsaDriver/$(BSADRIVER_MODULE_VERSION



  <application>/src/Makefile should have the follwings:


  <application>_DBD += asyn.dbd
  <applicaiton>_DBD += yamlLoader.dbd
  <application>_DBD += bsaAsynDriver.dbd

  <application>_LIBS += cpsw
  <application>_LIBS += bsa
  <applicaiton>_LIBS += asyn
  <application>_LIBS += yamlLoader
  <application>_LIBS += bsaDriver


<application>/Db/Makefile should have the followings:

DB_INSTALLS += $(BSADRIVER)/db/bsa.db
DB_INSTALLS += $(BSADRIVER)/db/bsss.db
DB_INSTALLS += $(BSADRIVER)/db/bsssCtrl.db
(optional)
DB_INSTALLS += $(BSADRIVER)/db/bsssCtrl_localTest.db

- bsa.db  ;  BSA database template for each BSA data channel
- bsss.db ;  BSSS database template for each BSSS data channel
- bsssCtrl.db  ; BSSS controls database template 
- bsssCtrl_localTest.db ;  BSSS controls databse template for local test (it doesn't have CA_LINK to the global PVs)



- The yamlLoader driver should provide register hierarchy and path information.
- The application firmware should have BSA functionallity

yamlLoader Driver:

- the yamlLoader driver should load up the hierarchy file before BSA initialization

ex)  cpswLoadYamlFile("000TopLevel.yaml", "NetIODev", "", "10.0.3.105")

- please, check up more details in README file in yamlLoader driver


Adding BSA names for the driver:

- before the driver intialization, the ioc application engineer should create the BSA name list.
- the order of the names should be matched with the BSA data order in the application firmware.
- the driver provides the ioc shell command "addBsa(<BSA name string>, <BSA data type string>"),
   the ioc engineer can use the command to add up the bsa name into the list
- Various datatypes are supported and hence the user should ensure that 32-bit boundaries are not violated:
  e.g. addBsa --> name string, 32-bit data type
       addBsa --> name string, 16-bit data type
       addBsa --> name string,  2-bit data type
       addBSa --> name string, 16-bit data type
       ...

       The above example is INCORRECT because the consecutive bitwidths that are lower than 32 bits don't add up to exactly 32.

       Below, see an example of a BSA name list that is CORRECT:
       addBsa --> name string, 32-bit data type
       addBsa --> name string, 16-bit data type
       addBSa --> name string, 16-bit data type
       addBsa --> name string, 32-bit data type
       ...
- the driver provides the ioc shell command "listBsa()" to print out the BSA name list,
   the ioc engineer could verify the bsa name list with the command
- Should the data channel stay untouched (not scaled using slope/offset or casted to another type),
  a third optional parameter is passed to the addBsa function. This parameter is only taken into
  consideration for BLD (not BSA/BSAS/BSSS).
    - "0" (or empty) -> Operable
    - "1" -> Do not touch

ex)
# ====================================
# Setup BSA Driver
# ====================================
# add BSA
addBsa("PIDL",       "uint32")
addBsa("PIDU",       "uint32")
addBsa("TSL",        "uint32")
addBsa("TSU",        "uint32", "1")
addBsa("RATES",      "uint32")
addBsa("BEAMREQ",    "uint32")
addBsa("BEAMNRG01",  "uint32", "1")
addBsa("BEAMNRG23",  "uint32")
addBsa("MPSSTAT",    "uint32")
addBsa("MPSCLASS01", "uint32")
addBsa("MPSCLASS23", "uint32")

ex)
vioc-b84-ev01>listBsa()
Total 31 BSA(s) has(have) been registered
        0       PIDL, uint32
        1       PIDU, uint32
        2       TSL, uint32
        3       TSU, uint32
        4       RATES, uint32
        5       BEAMREQ, uint32
        6       BEAMNRG01, uint32
        7       BEAMNRG23, uint32
        8       MPSSTAT, uint32
        9       MPSCLASS01, uint32


Adding Slave BSA names for the driver
- The slave BSA shares BSA data source with master.
- It could have different data conversion - separate slope and offset from the master BSA
- After creating master BSA node, create slave BSA node as the followings:

  addSlaveBsa(<BSA name for master>, <BSA name for slave>, "uint32")

- The "BSA name for master" should exist when adding the slave
- The "BSA name for slave" will be used for the BSAKEY for dbLoadRecords()


ex)
  addSlaveBsa("PIDL", "pidlSlave0", "uint32")
  addSlaveBsa("PIDL", "pidlSlave1", "uint32")
  addSlaveBsa("PIDL", "pidlSlave2", "uint32")
  addSlaveBsa("PIDL", "pidlSlave3", "uint32")
  addSlaveBsa("PIDL", "pidlSlave4", "uint32")
  addSlaveBsa("PIDL", "pidlSlave5", "uint32")

  In this example, we added up 6 slave BSAs for PIDL BSA.

  listBsa()
  Total 31 BSA(s) has(have) been registered
        0       PIDL, double
                +----- slave node 0     pidlSlave0, uint32
                +----- slave node 1     pidlSlave1, uint32
                +----- slave node 2     pidlSlave2, uint32
                +----- slave node 3     pidlSlave3, uint32
                +----- slave node 4     pidlSlave4, uint32
                +----- slave node 5     pidlSlave5, uint32
        1       PIDU, uint32
        2       TSL, uint32
        3       TSU, uint32

  listBsa() command shows master node and its slave nodes

ex)
  addBsa("SIGNAL00_I",    "uint16")
  addBsa("SIGNAL00_Q",    "uint16")
  addBsa("SIGNAL01_I",    "uint16")
  addBsa("SIGNAL01_Q",    "uint16")
  addBsa("SIGNAL02_I",    "uint16")
  addBsa("SIGNAL02_Q",    "uint16")
  addBsa("SIGNAL03_I",    "uint16")
  addBsa("SIGNAL03_Q",    "uint16")
  addBsa("SIGNAL04_I",    "uint16")
  addBsa("SIGNAL04_Q",    "uint16")
  ...
  addBsa("SIGNAL23_I",    "uint16")
  addBsa("SIGNAL23_Q",    "uint16")
  addBsa("SIGNAL24",      "uint32")
  addBsa("SIGNAL25",      "uint32")
  addBsa("SIGNAL26",      "uint32")
  addBsa("SIGNAL27",      "uint32")
  addBsa("SIGNAL28",      "uint32")
  addBsa("SIGNAL29",      "uint32")
  addBsa("SIGNAL30",      "uint32")

sioc-b15-ts02>listBsa
  Bsa Driver (named_root: MyRoot0, port: bsaPort)
  Total 55 BSA(s) has(have) been registered
  0       SIGNAL00_I, uint16
  1       SIGNAL00_Q, uint16
  2       SIGNAL01_I, uint16
  3       SIGNAL01_Q, uint16
  4       SIGNAL02_I, uint16
  5       SIGNAL02_Q, uint16
  6       SIGNAL03_I, uint16
  7       SIGNAL03_Q, uint16
  8       SIGNAL04_I, uint16
  9       SIGNAL04_Q, uint16
  ...
  47      SIGNAL23_Q, uint16
  48      SIGNAL24, uint32
  49      SIGNAL25, uint32
  50      SIGNAL26, uint32
  51      SIGNAL27, uint32
  52      SIGNAL28, uint32
  53      SIGNAL29, uint32
  54      SIGNAL30, uint32


BSA Data Type

BSA driver and firmware allow {"uint2", "int16", "uint16", "int32", "uint32", "float32"} type of data.
If firmware doesn't calculate statistics (mean and rms) all types are allowed.
If firmware calculate statstics, only "int32" type is allowed.


driver initialization:
- the driver provide ioc shell command
  "bsaAsynDriverConfigure(<asyn port name for BSA>, <path for register space>, <path for dram space>)"
  for the driver initialization
- the driver initialization command should be called after completing the hierarchy loading by yamlLoader driver
  and also after the BSA name list is built.
- the register path and dram path should be consistent with the hierarchy files.
  (in the example, ROOT path of hierarchy is NetIODev,
   the register space is located at NetIODev/mmio/AmcCarrierTimingGenerator/AmcCarrierCore/AmcCarrierBsa,
   and the stream dram is located at NetIODev/strm/AmcCarrierDRAM/dram.)

ex)  bsaAsynDriverConfigure("bsaPort", "mmio/AmcCarrierTimingGenerator/AmcCarrierCore/AmcCarrierBsa","strm/AmcCarrierDRAM/dram")


Enable/Disable BSA:

After the driver initialization, the BSA can be disabled and enabled anytime via the following commands:

    bsaAsynDriverEnable()
    bsaAsynDriverDisable()

The bsaAsynDriverConfigure() command enables BSA as a default (backward compatible).

The enable/disable is introduced for a work around solution for RSSI communication down issue.
We found RSSI communication is down when bsa driver makes heavy communication load,
and the communication down causes exception on iocs.
During the bsa driver is disabled, the firmware still works for bsa and keeps write data into DRAM.
The software does not check up new data and does not retrieve data from DRAM.
But, it is not harmful for firmware operation, if the write pointer reach to boundary of buffer,
the pointer moves back to the start address of the buffer.



EPICS database template loading:

- the driver module provide epics database template for the BSA history buffer PVs
- the template has few macros to set up PV name, BSA name and BSA buffer length for the history buffer PVs
- followings are an example BSA history buffer

  $(DEV):$(SECN)HST<n>          ; BSA history for average value
  $(DEV):$(SECN)CNTHST<n>       ; number of samples for an average value
  $(DEV):$(SECN)RMSHST<n>       ; RMS value
  $(DEV):$(SECN)PIDUHST<n>      ; pulse id upper word
  $(DEV):$(SECN)PIDLHST<n>      ; pulse id lower word

  $(DEV)         ; macro
  $(SECN)        ; macro, bsa PV name
  $(BSAKEY)      ; macro, bsa key, it should be matched with the bsa name string in addBsa()

  $(PORT)        ; macro, asyn port name for bsa driver, should be matched with the port name in the driver initialization

  <n>            ; given instance number / name
        [0..55]   BSA slot number for general use
	1H        pre-programmed BSA for 1Hz continuous acquisition
        TH        pre-programmed BSA for 10Hz continuous acquisition
        F1        reserved BSA slot for fast feedback
        F2        reserved BSA slot for fast feedback
        FLTB0     reserved BSA slot for fault buffer
        FLTB1     reserved BSA slot for fault buffer
        FLTB2     reserved BSA slot for fault buffer
        FLTB3     reserved BSA slot for fault buffer

ex)

# BSA driver DB
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=PIDU,SECN=PIDU")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=PIDL,SECN=PIDL")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=TSU,SECN=TSU")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=TSL,SECN=TSL")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=RATES,SECN=RATES")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=BEAMREQ,SECN=BEAMREQ")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=BEAMNRG01,SECN=BEAMNRG01")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=BEAMNRG23,SECN=BEAMNRG23")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=MPSSTAT,SECN=MPSSTAT")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=MPSCLASS01,SECN=MPSCLASS01")

# PIDL has Slave BSAs
#
#   Test Slave Bsa Node
#
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave0,SECN=PIDLSL0")
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave1,SECN=PIDLSL1")
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave2,SECN=PIDLSL2")
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave3,SECN=PIDLSL3")
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave4,SECN=PIDLSL4")
dbLoadRecords("db/bsa.db", "DEV=TPG:SYS2:1,PORT=bsaPort,BSAKEY=pidlSlave5,SECN=PIDLSL5")




- the database template loading can be located before driver initialization



BSA buffer length change and Fault buffer length change

The BSA buffer length and Fault buffer length are fixed (BSA length: 20000 and Fault buffer length: 1000000)
We do not suppose, end user need to change it, but the bsaDriver has way to make change the lengths.

the buffer lengths is defined in epics ioc shell variables. you cna check up the values as the followings.

example)

    epics>var bsa_length
    bsa_length = 20000
    epics>var fltb_length
    fltb_length = 100000

You cna change the variable with "var" command, but you should make change prior than any of BSA driver related command.

example) we are going to make double length for both buffer.

    epics>var bsa_length 40000
    epics>var fltb_length 2000000

You can also change the waveform length with two macros: BSA_LENGTH, FLTB_LENGTH.
If you do not specify the macors, these have 20000 and 1000000 as default values.

example)

dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=PIDU,SECN=PIDU,BSA_LENGTH=40000,FLTB_LENGTH=2000000")
dbLoadRecords("db/bsa.db", "DEV=TPG2:BSA,PORT=bsaPort,BSAKEY=PIDL,SECN=PIDL,BSA_LENGTH=40000,FLTB_LENGTH=2000000")






Linear Conversion

BSA database template has slope and offset PVs for each bsa name (bsakey).
The linear conversion affect the followings:

  bsa_data       = slope * raw_bsa_data + offset
  bsa_rmsa_value = slope * raw_rms_value


Slope and Offset PV names are:

  $(DEV):$(SECN)_SLOPE
  $(DEV):$(SECN)_OFFSET

These will be in autosave list.
The database template bsa.db has default value for SLOPE=1 and OFFSET=0.
These will be override by the autosave, once the user setting is saved.




-------------------------------------
Beam Synchronous Scalar Service (BSSS)
--------------------------------------

BSSS is implemented as a part of BSA driver in R2.0.0 or later.
Thus ioc engineer does not need to add up ".dbd" file and library file if the ioc already had BSA.

0. need to define BLD stream in 000TopLevel.yaml

# BLD Stream
bldstream: &bldstream
  SRP:
    protocolVersion: SRP_UDP_NONE
  UDP:
    port: 8198
    numRxThreads: *udpThreads
    threadPriority:  *udpPri
    pollSecs: 1

#  Inside NetIoDev session
     bldstream:
       class: Field
       at:
         <<: *bldstream


1. need to install database template (add folowings in Db/Makefile)

DB_INSTALLS += $(BSADRIVER)/db/bsss.db
DB_INSTALLS += $(BSADRIVER)/db/bsssCtrl.db
(oprtional)
DB_INSTALLS += $(BSADRIVER)/db/bsssCtrl_localTest.db

- bsss.db ;  BSSS database template for each BSSS data channel
- bsssCtrl.db  ; BSSS controls database template 
- bsssCtrl_localTest.db ;  BSSS controls databse template for local test (it doesn't have CA_LINK to the global PVs)


2. load up BSSS control data base template in st.cmd
example)
# BSSS Control/Monintoring PVs
dbLoadRecords("db/bsssCtrl.db", "DEV=${SYS_PV},PORT=bsssPort")

remarks) use bsssCtrl_localTest.db for BSSS test without global PVs



3. load up BSSS Scalar PVs (for each channel data)
example)
# BSSS Scalar PVs
dbLoadRecords("db/bsss.db", "DEV=${SYS_PV},PORT=bsssPort,BSAKEY=PIDL,SECN=PIDL")
dbLoadRecords("db/bsss.db", "DEV=${SYS_PV},PORT=bsssPort,BSAKEY=PIDU,SECN=PIDU")
dbLoadRecords("db/bsss.db", "DEV=${SYS_PV},PORT=bsssPort,BSAKEY=TSL,SECN=TSL")
dbLoadRecords("db/bsss.db", "DEV=${SYS_PV},PORT=bsssPort,BSAKEY=TSU,SECN=TSU")
dbLoadRecords("db/bsss.db", "DEV=${SYS_PV},PORT=bsssPort,BSAKEY=RATES,SECN=RATES")
......
remark) use the same macros what we have used for BSA template. new macro, IDX macro should have a sequencial number from 0

4. make association with BSA channel, BSSS can use BSA channel defintitions
Use the following command to make association with BSA channels after bsaAsynDriverConfigure() command

#
#  Initialize BSSS driver
#  make assoication with BSA channels: bsssAssociateBsaChannels(<BSA port name>)
bsssAssociateBsaChannels("bsaPort")

remark) the <BSA port name> should be the smae string id which has been used for bsaASynDriverConfigure()


5. configure BSSS driver with the following command

# confiugre BSSS driver: bsssAsynDriverConfigure(<bsss port>, <register path>)
bsssAsynDriverConfigure("bsssPort", "mmio/AmcCarrierTimingGenerator/AmcCarrierCore/AmcCarrierBsa/Bsss")

remark) the register path sould be different depends application

6. report function

- bldStream
epics> dbior bldStreamDriver 5
Driver: bldStreamDriver
        BLD Stream for root_0
          read size  : 152
          read count : 959035
          bld count  : 0
          bsss count : 959035
          bld callback : (nil)
          bld_usr      : (nil)
          bsss_callback: 0x695970
          bsss_usr     : 0x275ef50
          free list    : 0x28a0b70
                 >>>>valid mask<<<: 7fffffff
                 timestamp, nsec  : 24b14a1e
                 timestamp, sec   : 3c48c4ce
                 pulse id, lower  : 6b18ebbe
                 pulse id, upper  :     eb11
                 channel mask     : 7fffffff
                 service mask     :        3

- serviceAsynDriver
epics> dbior serviceAsynDriver 1
Driver: serviceAsynDriver
named_root: MyRoot0, port: bsssPort, driver instace: 0x14e4b80, number of channels: 31
named_root: MyRoot0, port: bldPort, driver instace: 0x187f310, number of channels: 31

7. Simple Test

Set up 10Hz fixed rate for SCUD1 (one of user defined rate) and monitor BSSS data and pulse id
suppose) IOC name                  TPG:SYS2:2      (B84 TPG)
         BSSS data channel name    ACVADCA         (AC voltage ADC phase A)


caput TPG:SYS2:2:SCUD1:RATELIMIT "119Hz"           # set up rate limit to 119Hz
caput TPG:SYS2:2:SCUD1:RATEMODE  "Fixed Rate"      # choose fixed rate mode
caput TPG:SYS2:2:SCUD1:FIXEDRATE "10Hz"            # select 10Hz rate
caput TPG:SYS2:2:SCUD1:DESTMODE  "Disable"         # disable destination, do not care about destination
caput TPG:SYS2:2:ACVADCABSSSCHNSEVR "Invalid"      # setup max severity to Invalid (no severity filtering) for ACVADCA
caput TPG:SYS2:2:SCUD1:ENB "Enable"                # Enable SCUD1

# monitor ACVADCA and its pulse id for SCUD1

camonitor -g 16 TPG:SYS2:2:ACVADCASCUD1   TPG:SYS2:2:ACVADCAPIDSCUD1
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:27.608926 258461968689718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:27.608926 53357  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:27.706926 258461968780718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:27.706926 53359  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:27.804926 258461968871718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:27.804926 53358  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:27.902926 258461968962718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:27.902926 53358  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:28.000926 258461969053718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:28.000926 53358  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:28.098926 258461969144718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:28.098926 53360  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:28.196926 258461969235718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:28.196926 53355  
TPG:SYS2:2:ACVADCAPIDSCUD1     2022-01-18 17:33:28.294926 258461969326718  
TPG:SYS2:2:ACVADCASCUD1        2022-01-18 17:33:28.294926 53357  

Timestamp should be aligned between data and PID
PID interval should be 91000 at 10Hz rate


remark) BSSS PV names and descriptions in the following link:
https://confluence.slac.stanford.edu/display/~khkim/BSSS+PV+Name+List



-------------------------------------
Beamline data acquisition (BLD)
--------------------------------------

BLD is implemented as a part of BSA driver in R2.5.0 or later.
Thus ioc engineer does not need to add up ".dbd" file and library file if the ioc already had BSA.

0. need to define BLD stream in 000TopLevel.yaml
--------------------------------------------------

# BLD Stream
bldstream: &bldstream
  SRP:
    protocolVersion: SRP_UDP_NONE
  UDP:
    port: 8198
    numRxThreads: *udpThreads
    threadPriority:  *udpPri
    pollSecs: 1

#  Inside NetIoDev session
     bldstream:
       class: Field
       at:
         <<: *bldstream


1. need to install database template (add folowings in Db/Makefile)
--------------------------------------------------

DB_INSTALLS += $(BSADRIVER)/db/bld.db
DB_INSTALLS += $(BSADRIVER)/db/bldCtrl.db
(optional)
DB_INSTALLS += $(BSADRIVER)/db/bldCtrl_localTest.db

- bld.db ;  BLD database template for each BLD data channel
- bldCtrl.db  ; BLD controls database template 
- bldCtrl_localTest.db ;  BLD controls databse template for local test (it doesn't have CA_LINK to the global PVs)


2. load up BLD control data base template in st.cmd
--------------------------------------------------

example)
# BLD Control/Monintoring PVs
dbLoadRecords("db/bldCtrl.db", "DEV=${SYS_PV},PORT=bldPort")

remarks) use bldCtrl_localTest.db for BLD test without global PVs



3. load up BLD Scalar PVs (for each channel data)
--------------------------------------------------

example)
# BLD Scalar PVs
dbLoadRecords("db/bld.db", "DEV=${SYS_PV},PORT=bldPort,BSAKEY=PIDL,SECN=PIDL")
dbLoadRecords("db/bld.db", "DEV=${SYS_PV},PORT=bldPort,BSAKEY=PIDU,SECN=PIDU")
dbLoadRecords("db/bld.db", "DEV=${SYS_PV},PORT=bldPort,BSAKEY=TSL,SECN=TSL")
dbLoadRecords("db/bld.db", "DEV=${SYS_PV},PORT=bldPort,BSAKEY=TSU,SECN=TSU")
dbLoadRecords("db/bld.db", "DEV=${SYS_PV},PORT=bldPort,BSAKEY=RATES,SECN=RATES")
......
remark) use the same macros what we have used for BSA template. 

4. make association with BSA channel 
--------------------------------------------------

BLD can use BSA channel definitions. Use the following command to make association with BSA channels after bsaAsynDriverConfigure() command

#
#  Initialize BLD driver
#  make assoication with BSA channels: bldAssociateBsaChannels(<BSA port name>)
bldAssociateBsaChannels("bsaPort")

remark) the <BSA port name> should be the smae string id which has been used for bsaASynDriverConfigure()

5. configure BLD driver with the following command
--------------------------------------------------

# configure BLD driver: bldAsynDriverConfigure(<bld port>, <register path>, <payload pva basename>)
bldAsynDriverConfigure("bldPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bld", "TST:SYS2:04")

remark) the register path should be different depending on the application

In case the BSAKEY is not desired to be used in the name/type PVA, a name for the BLD channel can
be created using the following function.

bldChannelName(<BSAKEY>,   <NAME/ALIAS>)

Example)
bldChannelName("YFIXEDPAMC1",   "POSY")

6. Report function
--------------------------------------------------

- bldStream
epics>dbior bldStreamDriver 5
Driver: bldStreamDriver
        BLD Stream for MyRoot0
          read size  : 768
          read count : 7960928
          bld count  : 7695234
          bsss count : 1131
          bsas count : 193179
          bld callback : 0x62e5c0
          bld_usr      : 0x187f310
          bsss_callback: 0x62e370
          bsss_usr     : 0x14e4b80
          bsas_callback: 0x631710
          bsas_usr     : 0x18a3930
          free list    : 0x16a8780
          bld  callback processing (usec): snapshot   15.496, min   14.167, max   39.318
          bsss callback processing (usec): snapshot 1074.218, min  968.287, max 4042.424
          bsas callback processing (usec): snapshot    5.948, min    4.807, max 1241.223
                 --------------------------------
                 BSSS Packet: size(768)
                 --------------------------------
                 timestamp, nsec  : 13f39b57
                 timestamp, sec   : 3d9550d1
                 pulse id, lower  : 4e45bad3
                 pulse id, upper  :     fded
                 channel mask     : 7fffffff
                 service mask     : 801e033d
                 severity mask    :   b9098100b90981
                 --------------------------------
                 BSAS Packet: size(768)
                 --------------------------------
                 timestamp (64bit): 3d9550d114892497
                 pulse id  (64bit):     fded4e45de5f
                 channel mask     : 7fffffff
                 row number       : 839
                 table_count      : 14
                 edef_index       : 0
                 byte pad (0x80)  : 80
                 PL CH    CNT EVL ESQ FIX     VAL       SUM       SQUARE      MIN      MAX
                 -------------------------------------------------------------------------
                  0  0      1   N   N   N    1de5f    1de5f    37de6e741    1de5f    1de5f
                  1  1      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  2  2      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  3  3      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  4  4      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  5  5      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  6  6      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  7  7      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  8  8      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                  9  9      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 10 10      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 11 11      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 12 12      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 13 13      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 14 14      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 15 15      1   N   N   N    12d0d    12d0d    1620792a9    12d0d    12d0d
                 16 16      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 17 17      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 18 18      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 19 19      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 20 20      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 21 21      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 22 22      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 23 23      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 24 24      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 25 25      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 26 26      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 27 27      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 28 28      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 29 29      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 30 30      0   N   E   F   b92d0d        0            0   b92d0d   b92d0d
                 --------------------------------
                 BLD Packet: size(156)
                 --------------------------------
                 timestamp        : 3d9550d1149818b7
                 pulse ID         :     fded4e45e1ed
                 channel mask     :         7fffffff
                 service mask     :          8000000
                 Chan. data found :               31
                 Severity mask    : 3faa5500ffaa5500


- serviceAsynDriver
epics> dbior serviceAsynDriver 1
Driver: serviceAsynDriver
named_root: MyRoot0, port: bsssPort, driver instace: 0x14e4b80, number of channels: 31
named_root: MyRoot0, port: bldPort, driver instace: 0x187f310, number of channels: 31


7. Slope and offset
--------------------------------------------------

The slope and offset for BLD are those of the BSA as mentioned earlier.

  $(DEV):$(SECN)_SLOPE
  $(DEV):$(SECN)_OFFSET

8. Simple Test
--------------------------------------------------

All BLD EDEFs are system EDEFs. They should automatically get their configuration from the global PVs.

Nonetheless, the user still need to perform the following settings

caput TST:SYS2:04:SCHBR:MULT_PORT 50000
caput TST:SYS2:04:SCHBR:MULT_ADDR 239.255.4.3
caput TST:SYS2:04:BLD_CTRL:ENB "Enable"            # Enabling BLD functionality in IOC

Now you should be able to capture the outgoing BLD packets using tcpdump
>>  /usr/sbin/tcpdump -i <interface> port 50000
To see the contents of the packet, run
>>  /usr/sbin/tcpdump -X -i <interface> port 50000

The channel types in the packets are reflected by the pv access PV <payload pva basename>:BLD:PAYLOAD
To uncover the correct full name, use the following command from the IOC terminal
IOCSHELL> pvxsl
<payload pva basename>:BLD:PAYLOAD

To examine its content, you can run from a linux terminal
pvinfo <payload pva basename>:BLD:PAYLOAD

remark) BLD PV names and descriptions in the following link:
https://confluence.slac.stanford.edu/pages/viewpage.action?spaceKey=~carolina&title=BLD+PVs

-------------------------------------------
Beam Synchronous Acquisition Service (BSAS)
-------------------------------------------

BSAS (Beam Synchronous Acquisition Service) provides timestamp and pulse id aligned waveform data to the high-level application.
The BSAS uses NTTable PV to make a structured data format:

- There are multiple rows in the NTTable, all of data in a row aligned with a specific timestamp and pulse id
- There are multiple columns in the NTTable PV: timestamp-seconds, timestamp-nonoseconds, pulse id and data column.
  the number of data columns can be configurable and varies for different iocs.
- Each data channel have 5 columns
    .CNT: number of accumulated samples in the row
          for statstical data      .CNT >= 2
          for non-statistical data .CNT = 1
    .VAL: delegate sample (very first sample in the row for the statistical data)
    .AVG: arithmetic mean of the samples
    .RMS: standard deviation of the samples
    .MIN: minimum of the samples
    .MAX: maximum of the samples
- There are 4 of NTTable PVs which can be configured independently for different destinations and different rates
- The acquisition rate, number of samples for statistical data in a row, number rows and update rate for NTTable can be configured by BSAS rate control PVs

Remarks) please, check up the following slide deck for the BSAS design amd impelmentation details

https://1drv.ms/p/s!AsH0Qpew48nUh7xfkO4-X_lMj48VmA?e=6Ea8FP

Please, check up the following confluence page

https://confluence.slac.stanford.edu/display/~khkim/BSAS+Driver+Configuration+and+Control+PVs


0. Build application with PVXS and QSRV
----------------------------------------

BSAS uses NTTable to expose the strcutred data, it requires to build with PVXS and QSRV

- configure/RELEASE.local
PVXS_MODULE_VERSION  = R0.3.1-0.0.1
PVXS                 =$(EPICS_MODULES)/pvxs/$(PVXS_MODULE_VERSION)

- src/Makefile
# ===========================================
# EPICS 7 PVXS support
# Order of the two libraries is important:
# ===========================================
<your application>_LIBS += pvxsIoc
<your application>_LIBS += pvxs
<your application>_DBD  += pvxsIoc.dbd
# ===========================================

# ===================================================
# Include Support for EPICS version 7
# Link QSRV (pvAccess Server) if available
# ===================================================
<your application>_LIBS += qsrv
<your application>_LIBS += $(EPICS_BASE_PVA_CORE_LIBS)
<your applicaiton>_DBD  += PVAServerRegister.dbd
<your application>_DBD  += qsrv.dbd



1. How to install BSAS database templates
-----------------------------------------

Put the followings into the Db/Makefile

DB_INSTALLS += $(BSADRIVER)/db/bsas.db         # channel control tempalte (enable/disable channel, severity filtering for channel), need to load up for each data channels
DB_INSTALLS += $(BSADRIVER)/db/bsasCtrl.db     # rate control template, work with global PVs
DB_INSTALLS += $(BSADRIVER)/db/bsasCtrl_localTest.db 
                                               # rate control template, work without global PVs, just for a standalone test


2. load BSAS rate control template in st.cmd
---------------------------------------------

# BSAS Destination/Rates Control PVs
dbLoadRecords("db/bsasCtrl.db", "DEV=${SYS_PV},PORT=bsasPort")

remarks) for the standalone test without global PV, we can use "bsasCtrl_localTest.db" instead of "bsasCtrl.db"


3. load BSAS channel control (enable/disable, channel filtering) template in st.cmd
-----------------------------------------------------------------------------------

# BSAS Severity Filtering for Each channel
dbLoadRecords("db/bsas.db", "DEV=${SYS_PV},PORT=bsasPort,BSAKEY=PIDL,SECN=PIDL")
dbLoadRecords("db/bsas.db", "DEV=${SYS_PV},PORT=bsasPort,BSAKEY=PIDU,SECN=PIDU")
dbLoadRecords("db/bsas.db", "DEV=${SYS_PV},PORT=bsasPort,BSAKEY=TSL,SECN=TSL")
dbLoadRecords("db/bsas.db", "DEV=${SYS_PV},PORT=bsasPort,BSAKEY=TSU,SECN=TSU")
dbLoadRecords("db/bsas.db", "DEV=${SYS_PV},PORT=bsasPort,BSAKEY=RATES,SECN=RATES")


4. make association with BSA to inherit the BSA data channels
-------------------------------------------------------------

#
#  Initialize BSSS driver
#  make assoication with BSA channels: bsssAssociateBsaChannels(<BSA port name>)
bsssAssociateBsaChannels("bsaPort")


5. make mapping between data channel and base name
--------------------------------------------------

The base name will be used for the column lable in the NTTable
ex) column lable will be <base_name>.CNT, <base_name>.VAL, <base_name>.AVG, <base_name>.RMS, <base_name>.MIN, <base_name>.MAX


#  base name assign for the BSAS channels
#  bsasBaseName(<BSAS data channel, BsaKey>, <base PV name>)
bsasBaseName("PIDL",    "${SYS_PV}:PIDL")
bsasBaseName("PIDU",    "${SYS_PV}:PIDLU")
bsasBaseName("TSL",     "${SYS_PV}:TSL")
bsasBaseName("TSU",     "${SYS_PV}:TSU")
bsasBaseName("RATES",   "${SYS_PV}:RATES")


6. configure BSAS driver
------------------------

# configure BSAS driver: bsasAsynDriverConfigure(<bsas port>, <register path>, <NTTable PV1>, <NTTable PV2>, <NTTable PV3>, <NTTable PV4>, [named_root (optional)])
# remarks) ioc shell does NOT allow multiple-line input for a command, thus, we need to list up all of the arguments in a sngle line
bsasAsynDriverConfigure("bsasPort", "mmio/AmcCarrierCore/AmcCarrierBsa/Bsas", "${SYS_PV}:NTTBL1", "${SYS_PV}:NTTBL2", "${SYS_PV}:NTTBL3","${SYS_PV}:NTTBL4" )



7. Programming NTTable rate
---------------------------
Please, check up the slide deck above to understand the rate control operation

8. checking up BSAS driver status
---------------------------------

ex) use dbior() command on the ioc shell

sioc-b084-ts02>dbior bldStreamDriver 1
Driver: bldStreamDriver
        BLD Stream for MyRoot0
          read size  : 768
          read count : 11785893
          bld count  : 0
          bsss count : 118033
          bsas count : 11667845
          bld callback : (nil)
          bld_usr      : (nil)
          bsss_callback: 0x8136a0
          bsss_usr     : 0x13d9dd0
          bsas_callback: 0x8165a0
          bsas_usr     : 0x152bf60
          free list    : 0x14b8660
          bld  callback processing (usec): snapshot    0.000, min    0.000, max    0.000
          bsss callback processing (usec): snapshot  553.818, min  444.024, max 1122.685
          bsas callback processing (usec): snapshot    3.097, min    0.694, max 1461.080
                 --------------------------------
                 BSSSS Packet: size(156)
                 --------------------------------
                 timestamp, nsec  :  dff5c81
                 timestamp, sec   : 3ce80602
                 pulse id, lower  : 2f2da330
                 pulse id, upper  :     f499
                 channel mask     : 7fffffff
                 service mask     :        1
                 severity mask    : 3faa5500ffaa5500
                 --------------------------------
                 BSAS Packet: size(768)
                 --------------------------------
                 timestamp (64bit): 3ce806020f396321
                 pulse id  (64bit):     f4992f2dedd6
                 channel mask     : 7fffffff
                 row number       : 821
                 table_count      : 0
                 edef_index       : 0
                 byte pad (0x80)  : 80
                 PL CH    CNT EVL ESQ FIX     VAL       SUM       SQUARE      MIN      MAX
                 -------------------------------------------------------------------------
                  0  0      1   N   E   N 2f2dedd6  f2dedd6    3b8a1eee4 2f2dedd6 2f2df163
                  1  1      1   E   E   N 809359f4   9359f4     6bb39090 809359f4 80935d81
                  2  2      1   N   E   N  11359f4  11359f4     6bb39090  11359f4  1135d81
                  3  3      1   E   E   N 819359f4  19359f4     6bb39090 819359f4 81935d81
                  4  4      1   N   E   N  21359f4  21359f4     6bb39090  21359f4  2135d81
                  5  5      1   E   E   N 829359f4  29359f4     6bb39090 829359f4 82935d81
                  6  6      1   N   E   N  31359f4  31359f4     6bb39090  31359f4  3135d81
                  7  7      1   E   E   N 839359f4  39359f4     6bb39090 839359f4 83935d81
                  8  8      1   N   E   N  41359f4  41359f4     6bb39090  41359f4  4135d81
                  9  9      1   E   E   N 849359f4  49359f4     6bb39090 849359f4 84935d81
                 10 10      1   N   E   N  51359f4  51359f4     6bb39090  51359f4  5135d81
                 11 11      1   E   E   N 859359f4  59359f4     6bb39090 859359f4 85935d81
                 12 12      1   N   E   N  61359f4  61359f4     6bb39090  61359f4  6135d81
                 13 13      1   E   E   N 869359f4  69359f4     6bb39090 869359f4 86935d81
                 14 14      1   N   E   N  71359f4  71359f4     6bb39090  71359f4  7135d81
                 15 15      1   E   E   N 879359f4  79359f4     6bb39090 879359f4 87935d81
                 16 16      0   N   E   F  81359f4        0            0  81359f4  8135d81
                 17 17      0   E   E   F 889359f4        0            0 889359f4 88935d81
                 18 18      0   N   E   F  91359f4        0            0  91359f4  9135d81
                 19 19      0   E   E   F 899359f4        0            0 899359f4 89935d81
                 20 20      0   N   E   F  a1359f4        0            0  a1359f4  a135d81
                 21 21      0   E   E   F 8a9359f4        0            0 8a9359f4 8a935d81
                 22 22      0   N   E   F  b1359f4        0            0  b1359f4  b135d81
                 23 23      0   E   E   F 8b9359f4        0            0 8b9359f4 8b935d81
                 24 24      0   N   E   F  c1359f4        0            0  c1359f4  c135d81
                 25 25      0   E   E   F 8c9359f4        0            0 8c9359f4 8c935d81
                 26 26      0   N   E   F  d1359f4        0            0  d1359f4  d135d81
                 27 27      0   E   E   F 8d9359f4        0            0 8d9359f4 8d935d81
                 28 28      0   N   E   F  e1359f4        0            0  e1359f4  e135d81
                 29 29      0   E   E   F 8e9359f4        0            0 8e9359f4 8e935d81
                 30 30      0   N   E   F  f1359f4        0            0  f1359f4  f135d81
sioc-b084-ts02>


9. read out NTTtable
--------------------

- get pv list in a host
  pvlist <host>

ex)
khkim@lcls-dev3 ~ $ pvlist cpu-b084-sp18
TST:SYS2:4:NTTBL1
TST:SYS2:4:NTTBL2
TST:SYS2:4:NTTBL3
TST:SYS2:4:NTTBL4


- check up pv structure
  pvinfo <pv name, NTTable PV name>
ex)
khkim@lcls-dev3 ~ $ pvinfo TST:SYS2:4:NTTBL1
TST:SYS2:4:NTTBL1
Server: 134.79.217.42:5075
Type:
    epics:nt/NTTable:1.0
        string[] labels
        structure value
            uint[] secondsPastEpoch
            uint[] nanoseconds
            ulong[] pulseId
            uint[] pv0_cnt
            double[] pv0_val
            double[] pv0_avg
            double[] pv0_rms
            double[] pv0_min
            double[] pv0_max
            uint[] pv1_cnt
            double[] pv1_val
            double[] pv1_avg
            double[] pv1_rms
            double[] pv1_min
            double[] pv1_max
            uint[] pv2_cnt
            double[] pv2_val
            double[] pv2_avg
            double[] pv2_rms
            double[] pv2_min
            double[] pv2_max


            uint[] pv30_cnt
            double[] pv30_val
            double[] pv30_avg
            double[] pv30_rms
            double[] pv30_min
            double[] pv30_max


- get data from the NTTable PV
  pvget <pv name, NTTable PV name>

ex)
  pvget TST:SYS2:4:NTTBL1








# End of file
